#!/bin/bash

# The script helps with putting a network interface into monitor mode. (and back into managed).

#PRECHECK: IS SUDO GIVEN?
if [ "$EUID" -ne 0 ]; then
        printf "Run it as root\n"
        exit 1
fi

#PRECHECK: ARE 2 ARGS GIVEN?
if [ "$#" -ne 2 ]; then
	printf "Invalid input\nUsage: sudo %s <INTERFACE> <MODE>\n" "$(basename "$0")"
        exit 1
fi

#ARGUMENTS AS VARIABLES
declare -r -l INTERFACE="$1"
declare -r -l MODE="$2"

#CHECK: DOES INTERFACE EXIST?
if [ ! -d /sys/class/net/"$INTERFACE" ]; then
	printf "Invalid interface - check ifconfig\n"
        x=1
fi

#CHECK: IS MODE monitor OR managed?
if [[ "$MODE" != "monitor" && "$MODE" != "managed" ]]; then
	printf "Invalid mode - managed or monitor\n"
	x=1
fi

#EXIT WHEN (POST)CHECKS ARE INVALID
if [ -v x ]; then
	exit 1
fi


RED='\033[0;31m'
GREEN_BOLD='\033[1;32m'
RESET='\033[0m'

#DISABLING INTERFACE
if ! ip link set "$INTERFACE" down; then
	printf "${RED}Something went wrong when disabling %s${RESET}\n" "$INTERFACE"
fi

#CHANGING INTERFACE MODE
if iw dev "$INTERFACE" set type "$MODE"; then
	printf "${GREEN_BOLD}%s changed to %s${RESET}\n" "$INTERFACE" "$MODE"
else
	printf "${RED}Failed to change mode${RESET}\n"
fi

#ENABLING INTERFACE
if ! ip link set "$INTERFACE" up; then
	printf "${RED}Something went wrong when enabling %s${RESET}\n" "$INTERFACE"
fi

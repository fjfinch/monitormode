#!/bin/bash

# This script helps with putting a network interface (NIC) into monitor mode. (and back into managed mode).
# Two arguments are needed. The <INTERFACE> (ex. wlan0), and the <MODE> (managed or monitor)
# ---------------------------------------------------------------------

#COLORED OUTPUT
declare -r RED='\033[0;31m'
declare -r GREEN='\033[1;32m'
declare -r RESET='\033[0m'

#PRECHECK: IS SUDO GIVEN?
if [ "${EUID}" -ne 0 ]; then
        printf "${RED}Run it as root${RESET}\n"
        exit 1
fi

#PRECHECK: ARE 2 ARGS GIVEN?
if [ "$#" -ne 2 ]; then
	printf "${RED}Missing arguments.${RESET} Usage: sudo %s <INTERFACE> <MODE>\n" "$(basename "$0")"
        exit 1
fi

#ARGUMENTS AS VARIABLES
declare -r -l INTERFACE="$1"
declare -r -l MODE="$2"

#CHECK: DOES INTERFACE EXIST?
if [ ! -d /sys/class/net/"${INTERFACE}" ]; then
	printf "${RED}Invalid interface - check ifconfig or iwconfig${RESET}\n"
        x=1
fi

#CHECK: IS MODE monitor OR managed?
if [[ "${MODE}" != "monitor" && "${MODE}" != "managed" ]]; then
	printf "${RED}Invalid mode - managed or monitor${RESET}\n"
	x=1
fi

#EXIT WHEN (POST)CHECKS ARE INVALID
if [ -v x ]; then
	exit 1
fi

#----------------------------------------------------------------------

#DISABLING INTERFACE
if ! ip link set "${INTERFACE}" down; then
	printf "${RED}Something went wrong when disabling %s${RESET}\n" "${INTERFACE}"
fi

#CHANGING INTERFACE MODE
if iw dev "${INTERFACE}" set type "${MODE}"; then
	printf "${GREEN}%s changed to %s${RESET}\n" "${INTERFACE}" "${MODE}"
else
	printf "${RED}Failed to change mode${RESET}\n"
fi

#ENABLING INTERFACE
if ! ip link set "${INTERFACE}" up; then
	printf "${RED}Something went wrong when enabling %s${RESET}\n" "${INTERFACE}"
fi
